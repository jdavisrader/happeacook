.recipe-page-container
	.container
		.row
			.col-sm-2
			.col-lg-8
				.recipe-pictures
					- if @recipe.header.attached?
						= image_tag @recipe.header
					- else


				h1.recipe-name-header
					= @recipe.name

				.recipe-creator
					- if @recipe.user_id.nil?
						= "By Nobody"
					-elsif !@recipe.imported_recipe.nil?
						= "Imported by "
						b.span.recipe-creator-name
							= "#{@recipe.user.username}"
					-else
						= "By "
						b.span.recipe-creator-name
							= "#{@recipe.user.username}"

				p
					=@recipe.description

				-if !@recipe.original_url.nil?
					.original-url
						= link_to "Original Recipe", @recipe.original_url, target: "_blank"

				.row
					.container.mb-2
						- @recipe.tags.each do |tag|
							span.badge.rounded-pill.bg-secondary.me-1
								= "#{tag.name}"

				.row
					.col-lg-12
						.recipe-info
							- if @recipe.servings.present?
								.recipe-info-detail
								= "Servings: #{@recipe.servings}"
							- if @recipe.prep_time.present?
								.recipe-info-detail
									= "Prep Time: #{display_time(@recipe.prep_time)} #{@recipe.prep_time_descriptor}"
							- if @recipe.cook_time.present?
								.recipe-info-detail
									= "Cook Time: #{display_time(@recipe.cook_time)} #{@recipe.cook_time_descriptor}"
							- if @recipe.rest_time.present?
								.recipe-info-detail
									= "Rest Time: #{display_time(@recipe.rest_time)} #{@recipe.rest_time_descriptor}"
							.recipe-info-detail
								= "Total Time: #{total_time_display(@recipe.prep_time, @recipe.prep_time_descriptor, @recipe.cook_time, @recipe.cook_time_descriptor, @recipe.rest_time, @recipe.rest_time_descriptor)}"
							- if @recipe.calories.present?
								.recipe-info-detail
									= "Calories: #{@recipe.calories}"
				.row
					.col-lg-12 
						.form-check.form-switch
							input#wakeLockToggle.form-check-input type="checkbox" role="switch" 
							label.form-check-label for="wakeLockToggle" test


				.row
					.col-lg-4
						.recipe_ingredients
							h5
								= "Ingredients"
							ul
								- @recipe.ingredients.order(:order_number).each do |ingredient|
									/ .recipe_ingredient_name
									li.recipe_list_items
										="#{ingredient.ingredient}"
					.col-lg-8
						.recipe_instructions
							h5
								= "Instructions"
							ol
								- @recipe.instructions.order(:step_number).each do |instruction|
									li.recipe_list_items = "#{instruction.step}"



				- if @recipe.original_recipe_photos.attached?
					.row
						.col-lg-12
							div
								= "Original Recipe Photos"
							div
								- @recipe.original_recipe_photos.each do |op|
									= link_to image_tag(@recipe.original_recipe_as_thumbnail(op)), op, class: "me-1"




				.row
					.recipe_links
						-if user_signed_in?
							-if @recipe.user_id == current_user.id || current_user.super_user?
								= link_to 'Edit | ', edit_recipe_path(@recipe)
								= link_to 'Delete |', @recipe, method: :delete, data: { confirm: 'Are you sure?' } 
						=link_to ' Back', recipes_path

		.col-sm-2

javascript:
	// Initialize wake lock variable
	let wakeLock = null;

	// Function to request wake lock
	async function requestWakeLock() {
		try {
			wakeLock = await navigator.wakeLock.request('screen');
			console.log('Screen wake lock is active');
		} catch (error) {
			console.error('Failed to acquire wake lock:', error);
		}
	}

	// Function to release wake lock
	async function releaseWakeLock() {
		if (wakeLock !== null) {
			try {
				await wakeLock.release();
				wakeLock = null;
				console.log('Screen wake lock has been released');
			} catch (error) {
				console.error('Failed to release wake lock:', error);
			}
		}
	}

	// Event listener for the toggle switch
	document.getElementById('wakeLockToggle').addEventListener('change', async (event) => {
		if (event.target.checked) {
			await requestWakeLock();
		} else {
			await releaseWakeLock();
		}
	});

	// Clean up wake lock on page unload
	window.addEventListener('unload', async () => {
		await releaseWakeLock();
	});
	